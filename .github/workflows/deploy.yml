name: Deploy Echoo to EC2

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: echoo
  EC2_INSTANCE_ID: i-0bd39b8310b1092ce
  EC2_HOST: 3.16.46.105

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build & push BOTH SHA and latest (ARM64 for t4g) with cache
    - name: Build and push image (ARM64) with cache
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max 

    # Deploy by SHA (immutable)
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script_stop: true
        script: |
          set -euo pipefail

          REGION="${{ env.AWS_REGION }}"
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"

          # Ensure AWS CLI (ARM) exists on EC2 for ECR login
          if ! command -v aws >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y curl unzip
            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
          fi

          aws --version

          # ECR login (works best if the EC2 has an IAM role with ECR pull permissions)
          aws ecr get-login-password --region "$REGION" \
            | docker login --username AWS --password-stdin "$REGISTRY"

          # Pull exact image by SHA
          docker pull "$IMAGE"

          # Stop & remove old container if exists
          docker stop echoo || true
          docker rm echoo || true

          # Run new container (environment variables loaded from SSM)
          docker run -d \
            --name echoo \
            -p 80:8000 \
            --cap-add=NET_BIND_SERVICE \
            -e ENVIRONMENT=prod \
            --restart always \
            "$IMAGE"

          # Show what's running
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.RunningFor}}"